{"version":3,"sources":["Content.js","App.js","serviceWorker.js","index.js"],"names":["segments","label","value","default","Content","props","onChange","setTimeout","JSON","stringify","state","onRestoreDefaults","alert","onFieldChange","event","setState","target","id","onSelectChange","index","selectedIndex","children","console","log","onUndo","contrast","brightness","onListen","listenTrigger","animation","useAnimation","autobrightness","fromServer","selected","bind","ready","this","lastDefaults","defaults","style","display","justifyContent","height","width","fieldTitle","name","mb","mode","min","onClick","color","backgroundColor","marginBottom","React","Component","marginTop","window","location","href","split","client","W3CWebSocket","App","sendMessage","onopen","onmessage","message","parse","data","render","msg","send","textAlign","margin","paddingTop","paddingLeft","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3086635f.chunk.js","sourcesContent":["import React from 'react';\nimport { Slider, Select, Button } from 'theme-ui'\n\n// import theme from './theme'\n\nconst segments = [\n    { label: 'Spotify', value: 'spotify', default: true },\n    { label: 'Listen', value: 'listen' }\n];\n\nexport class Content extends React.Component {\n\n    constructor(props) {\n        super(props)\n        // console.log(this.props);\n        // this.state = this.props.defaults\n        this.state = {\n            contrast: 0,\n            brightness: 0,\n            animation: 0,\n            useAnimation: true,\n            autobrightness: true,\n            fromServer: false,\n            segments: segments,\n            selected: 0\n        }\n        this.onChange = this.onChange.bind(this)\n        this.onFieldChange = this.onFieldChange.bind(this)\n        this.onUndo = this.onUndo.bind(this)\n        this.onListen = this.onListen.bind(this)\n        // this.onModeChange = this.onModeChange.bind(this)\n        this.onRestoreDefaults = this.onRestoreDefaults.bind(this)\n        this.ready = false;\n    }\n\n    componentDidMount() {\n        // console.log(this.props.defaults);\n        this.lastDefaults = this.props.defaults;\n        this.setState(this.props.defaults)\n        console.log(this.state);\n    }\n\n    componentDidUpdate() {\n        // console.log(this.props.key);\n        // this.setState(this.props.key)\n        if (this.props.defaults.fromServer === true) {\n            this.props.defaults.fromServer = false\n            this.ready = true;\n            this.setState(this.props.defaults)\n            // console.log(this.state);\n        }\n    }\n\n    onChange = () => {\n        setTimeout(() => {\n            this.props.onChange(JSON.stringify(this.state))\n        }, 100)\n    }\n\n    onRestoreDefaults = () => {\n        alert(\"not supported yet\")\n    }\n\n    onFieldChange = (event) => {\n        this.setState({ [event.target.id]: event.target.value })\n        this.onChange()\n    }\n\n    onSelectChange = (event) => {\n        let index = event.target.selectedIndex\n        let value = event.target.children[index].value\n        console.log(value);\n        this.setState({ [event.target.id]: value })\n        this.onChange();\n    }\n\n    onUndo = (event) => {\n        this.setState({ contrast: 10, brightness: 20 })\n        this.onChange()\n    }\n\n    onListen = (event) => {\n        // it is set to false by the python script. really, as far as this in concerned, it just pushes the change by calling onChange()\n        this.setState({listenTrigger: true})\n        this.onChange();\n    }\n\n    render() {\n        // console.log('rendering content', this.props.defaults);\n        if (!this.ready) {\n            // console.log('not ready');\n            return (\n                <div\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        // alignItems: 'center',\n                        height: 'auto',\n                    }}>\n                    <div style={{\n                        width: '90vw'\n                    }}>\n                        <h2>Connecting...</h2>\n                    </div>\n                </div >\n            )\n        }\n\n        return (<div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                // alignItems: 'center',\n                height: 'auto',\n            }}>\n            <div style={{\n                width: '90vw'\n            }}>\n                <h2>Settings</h2>\n                <h4 style={fieldTitle}>Mode</h4>\n                <Select name='mode' id='mode' mb={3} value={this.state.mode} onChange={this.onSelectChange}>\n                    <option value='spotify'>Spotify</option>\n                    <option value='listen'>Listen</option>\n                </Select>\n                <h4 style={fieldTitle}>Brightness</h4>\n                <Slider id='brightness' value={this.state.brightness} onChange={this.onFieldChange} />\n\n                <h4 style={fieldTitle}>Transition Length</h4>\n                <Slider id='animation' min={5} value={this.state.animation} onChange={this.onFieldChange} />\n\n                {/* <h4 style={fieldTitle}>Animation</h4>\n                <Select name='useAnimation' id='useAnimation' mb={3} value={this.state.useAnimation} onChange={this.onSelectChange}>\n                    <option value='true'>On</option>\n                    <option value='false'>Off</option>\n                </Select> */}\n\n                <h4 style={fieldTitle}>Auto Brightness</h4>\n                <Select name='autobrightness' id='autobrightness' mb={3} value={this.state.autobrightness} onChange={this.onSelectChange}>\n                    <option value='true'>On</option>\n                    <option value='false'>Off</option>\n                </Select>\n                {this.state.mode === 'listen'? <Button onClick={this.onListen} style={{ color: 'white', backgroundColor: 'black', width: '100%', marginBottom: '20px'}}>Listen Now</Button> : <></>}\n                \n                <Button onClick={this.onRestoreDefaults} style={{ color: 'gray', backgroundColor: 'white', width: '100%', marginBottom: '20px'}}>Restore Defaults</Button>\n            </div>\n        </div>);\n    }\n}\n\nexport default Content;\n\nconst fieldTitle = {\n    marginTop: '30px',\n    marginBottom: '10px'\n};","import React, { Component } from 'react';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport Content from './Content.js'\n\nlet url = window.location.href;\n\n//sorry for the complications here. there's probably a better way to do this with regex\nlet piIp = url.split(\"://\")[1].split(\":\")[0];\npiIp = \"192.168.68.110\"\n\nconst client = new W3CWebSocket(`ws://${piIp}:8080`);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.sendMessage = this.sendMessage.bind(this)\n    this.state = {defaults: {\n      contrast: 0,\n      brightness: 0,\n      animation: 0,\n      fromServer: false,\n      listenTrigger: false,\n      mode: \"spotify\"\n    }}\n  }\n\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n\n    client.onmessage = (message) => {\n      try {\n        this.setState({\n          defaults: JSON.parse(message.data)\n        });\n      } catch {\n        console.log(\"json read error\");\n      }\n      // console.log(message);\n      // console.log(this.state.defaults);\n      this.render()\n      // console.log(this.state.defaults);\n      return this.state.defaults\n    };\n  }\n  \n  sendMessage(msg) {\n    client.send(msg)\n  }\n\n  render() {\n    // console.log('rendering app', this.state.defaults);\n    // while (!this.state.ready){} \n    return (\n      <>\n        <div style={{\n          backgroundColor: 'black',\n          color: 'white',\n          height: '70px',\n          textAlign: 'left',\n        }}>\n          <h1 style={{\n            margin: '0px',\n            paddingTop: '12px',\n            paddingLeft: '12px'\n          }}>\n            Patrick's Frame\n      </h1>\n        </div>\n        <Content onChange={this.sendMessage} defaults={this.state.defaults} />\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}